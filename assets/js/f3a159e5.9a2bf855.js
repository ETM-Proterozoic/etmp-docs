"use strict";(self.webpackChunketmp=self.webpackChunketmp||[]).push([[3414],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),f=a,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5782:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"chaosfactor",title:"Chaos Factor and Verifiable Random Permutation",sidebar_label:"Chaos Factor and Verifiable Random Permutation",description:"Build your next blockchain app on ETM/P.",keywords:["docs","ETM/P"]},c="Chaos Factor and Verifiable Random Permutation",l={unversionedId:"whitepaper/chaosfactor",id:"whitepaper/chaosfactor",title:"Chaos Factor and Verifiable Random Permutation",description:"Build your next blockchain app on ETM/P.",source:"@site/docs/whitepaper/whitepaper-chaosfactor.md",sourceDirName:"whitepaper",slug:"/whitepaper/chaosfactor",permalink:"/docs/whitepaper/chaosfactor",draft:!1,editUrl:"/docs/whitepaper/whitepaper-chaosfactor.md",tags:[],version:"current",frontMatter:{id:"chaosfactor",title:"Chaos Factor and Verifiable Random Permutation",sidebar_label:"Chaos Factor and Verifiable Random Permutation",description:"Build your next blockchain app on ETM/P.",keywords:["docs","ETM/P"]},sidebar:"whitepaper",previous:{title:"Tokenomic",permalink:"/docs/whitepaper/tokenomic"},next:{title:"The Vision",permalink:"/docs/whitepaper/vision"}},u={},p=[],d={toc:p};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"chaos-factor-and-verifiable-random-permutation"},"Chaos Factor and Verifiable Random Permutation"),(0,o.kt)("p",null,"In this section we outline the innovative verifiable random permutation\nalgorithm, which adds additional security protection on top of the\nIstanbul BFT consensus mechanism.\\\nRandomness is an important ingredient in designing mechanisms to\nallocate resources. It is useful for achieving fairness and safety:\nEverything else being equal, if a resource has to be assigned to a\nperson rather than another person and money cannot be used to\ncompensate, then randomly allocating that resource is fair from an\nex-ante point of view ","[@mamageishvili2020mechanism]",". Meaningful use\nrandomness in blockchain design requires trust. One needs to ensure the\nrandomness mechanism cannot be manipulated, but this seems paradoxical\ngiven the trustless nature of the decentralized system.\\\nThe creation of verifiable identity uncertainty among the validators has\nalways been an integral part of Proof of Stake mechanism design. It is\nessential for security and decentralization that the next validator is\nselected in a random yet verifiable way. Many verifiable random\nfunctions have been proposed and used specifically for this task. In the\nETM chain validation process, the total number of validators is 21 in\neach round. There are $21!$ permutations of these nodes. The consensus\nmechanism will create uncertainty in the ordering of the nodes, by what\nwe call verifiable random permutation. We use information from the last\nblock of the previous round and SHA256 to create a chaos factor. Then,\nthis chaos factor can map into a specific permutation of the 21 nodes,\n","[@SLY]",". This creates an ordering of the validators, uniformly\ndistributed among the $21!$ possible permutations, and helps to mitigate\nthe risk of malicious nodes coalition. The whole process can be verified\nby any other nodes since the Hash is broadcasted and calculations can be\nperformed very quickly."))}f.isMDXComponent=!0}}]);